# bot.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Updater, CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
import pyqrcode
import os
import csv
from db import init_db, save_user, user_exists, get_all_users, mark_checked_in, is_checked_in

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("BOT_TOKEN")
TELEGRAM_CHANNEL_USERNAME = 'https://t.me/test1test123456test'
TELEGRAM_CHANNEL_LINK = f'https://t.me/test1test123456test'
INSTAGRAM_LINK = 'https://instagram.com/manch_artist'
ADMIN_IDS = [486487068]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–π QR-–∫–æ–¥:\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –∏ Instagram\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )
    keyboard = [
        [InlineKeyboardButton("üì≤ Telegram-–∫–∞–Ω–∞–ª", url=TELEGRAM_CHANNEL_LINK)],
        [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_LINK)],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ]
    context.bot.send_message(chat_id=chat_id, text=text, reply_markup=InlineKeyboardMarkup(keyboard))

def check_subscription(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    chat_id = query.message.chat.id
    query.answer()

    if user_exists(user_id):
        context.bot.send_message(chat_id=chat_id, text="‚úÖ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ QR-–∫–æ–¥.")
        return

    try:
        member = context.bot.get_chat_member(f"@{TELEGRAM_CHANNEL_USERNAME}", user_id)
        if member.status in ['member', 'administrator', 'creator']:
            qr_text = f"user_id:{user_id}"
            qr = pyqrcode.create(qr_text)
            file_path = f"{user_id}_qr.png"
            qr.png(file_path, scale=5)

            context.bot.send_photo(chat_id=chat_id, photo=open(file_path, 'rb'))
            context.bot.send_message(chat_id=chat_id, text="üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ü–æ–∫–∞–∂–∏—Ç–µ QR –Ω–∞ –≤—Ö–æ–¥–µ.")
            save_user(user_id, user.username, user.first_name, user.last_name, qr_text)
            os.remove(file_path)
        else:
            context.bot.send_message(chat_id=chat_id, text="‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        print(e)

def admin(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if user_id not in ADMIN_IDS:
        context.bot.send_message(chat_id=chat_id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="show_users")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", callback_data="export_csv")],
        [InlineKeyboardButton("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR", web_app=WebAppInfo(url="https://manch777.github.io/qr-scanner/"))]
    ]
    context.bot.send_message(chat_id=chat_id, text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

def handle_admin_action(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    chat_id = query.message.chat.id
    if user_id not in ADMIN_IDS:
        return
    query.answer()
    if query.data == "show_users":
        users = get_all_users()
        text = "\n".join([f"{u[0]} | {u[1] or ''} | {u[2] or ''} | {u[5][:10]} | {'‚úÖ' if u[6] else '‚ùå'}" for u in users]) or "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        context.bot.send_message(chat_id=chat_id, text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{text}")
    elif query.data == "export_csv":
        users = get_all_users()
        filename = "users_export.csv"
        with open(filename, "w", newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow(['user_id', 'username', 'first_name', 'last_name', 'qr_text', 'created_at', 'checked_in'])
            writer.writerows(users)
        context.bot.send_document(chat_id=chat_id, document=open(filename, "rb"))

def report(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if user_id not in ADMIN_IDS:
        context.bot.send_message(chat_id=chat_id, text="‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    users = get_all_users()
    total = len(users)
    checked_in_count = sum([1 for u in users if u[6] == 1])
    not_checked_in_count = total - checked_in_count
    context.bot.send_message(chat_id=chat_id, text=(
        f"üìä –û—Ç—á–µ—Ç –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚úÖ –ü—Ä–∏—à–ª–∏: {checked_in_count}\n"
        f"‚ùå –ù–µ –ø—Ä–∏—à–ª–∏: {not_checked_in_count}"
    ))

def handle_webapp_data(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    text = update.message.web_app_data.data.strip()
    if user_id not in ADMIN_IDS:
        return
    if text.startswith("user_id:") and text[8:].isdigit():
        scanned_id = int(text[8:])
        if user_exists(scanned_id):
            if is_checked_in(scanned_id):
                context.bot.send_message(chat_id=chat_id, text=f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {scanned_id} —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π.")
            else:
                mark_checked_in(scanned_id)
                context.bot.send_message(chat_id=chat_id, text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {scanned_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.")
        else:
            context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {scanned_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    else:
        context.bot.send_message(chat_id=chat_id, text="‚ùì –ù–µ–≤–µ—Ä–Ω—ã–π QR-–∫–æ–¥.")

def main():
    init_db()
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", admin))
    dp.add_handler(CommandHandler("report", report))
    dp.add_handler(CallbackQueryHandler(check_subscription, pattern="check_sub"))
    dp.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(show_users|export_csv)$"))
    dp.add_handler(MessageHandler(Filters.web_app_data, handle_webapp_data))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
