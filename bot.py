# ‚úÖ –ü–æ–ª–Ω—ã–π bot.py –¥–ª—è python-telegram-bot v20.7 (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å WebApp + QR + Render)

import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from db import init_db, save_user, check_user, mark_checked_in, get_report
from telegram.ext import CallbackQueryHandler
import pyqrcode
import io

# Logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN is missing! Set it in environment variables.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
init_db()

# üìå /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîó Telegram –∫–∞–Ω–∞–ª", url="https://t.me/test1test123456test")],
        [InlineKeyboardButton("üì∏ Instagram", url="https://instagram.com/your_instagram")],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)

# üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    username = query.from_user.username or "no_username"

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞):
    is_subscribed = True

    if is_subscribed:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
        qr = pyqrcode.create(str(user_id))
        buffer = io.BytesIO()
        qr.png(buffer, scale=5)
        buffer.seek(0)

        save_user(user_id, username)
        await query.message.reply_photo(photo=buffer, caption="–í–æ—Ç –≤–∞—à QR-–∫–æ–¥. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤—Ö–æ–¥–µ.")
    else:
        await query.message.reply_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")

# üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp QR —Å–∫–∞–Ω–µ—Ä–∞
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_message.web_app_data:
        return

    data = update.effective_message.web_app_data.data  # –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫–∞–Ω–µ—Ä–∞
    user_id = int(data)
    if check_user(user_id):
        mark_checked_in(user_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–∏—à–µ–¥—à–∏–π.")
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üìå /admin
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://qr-scanner-nine-pink.vercel.app/"  # –∑–∞–º–µ–Ω–∏—Ç—å
    keyboard = [[InlineKeyboardButton("üì∑ –û—Ç–∫—Ä—ã—Ç—å —Å–∫–∞–Ω–µ—Ä", web_app=WebAppInfo(url=url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–∫–∞–Ω–∏—Ä—É–π QR-–∫–æ–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", reply_markup=reply_markup)

# üìå /report
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count, checked_in = get_report()
    await update.message.reply_text(f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {count}\n‚úÖ –ü—Ä–∏—à–ª–∏: {checked_in}")

# üìå –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CommandHandler("report", report))

    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_TITLE, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.PINNED_MESSAGE, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_PHOTO, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.MESSAGE_AUTO_DELETE_TIMER_CHANGED, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.PROXIMITY_ALERT_TRIGGERED, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.VIDEO_CHAT_STARTED, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.VIDEO_CHAT_ENDED, start))
    app.add_handler(MessageHandler(filters.StatusUpdate.VIDEO_CHAT_SCHEDULED, start))
    # üëá Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ‚Äî –î–û MessageHandler
    app.add_handler(CallbackQueryHandler(button_handler, pattern="^check$"))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, start))
    app.add_handler(MessageHandler(filters.COMMAND, start))

    # üëá –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω WebApp
    app.add_handler(MessageHandler(filters.ALL, handle_webapp_data))
    
    logger.info("Bot started successfully")
    app.run_polling()


if __name__ == "__main__":
    main()
